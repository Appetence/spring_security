package com.ztx.web.controller;

import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.web.DefaultRedirectStrategy;
import org.springframework.security.web.RedirectStrategy;
import org.springframework.security.web.savedrequest.HttpSessionRequestCache;
import org.springframework.security.web.savedrequest.RequestCache;
import org.springframework.security.web.savedrequest.SavedRequest;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.ztx.security.borwser.support.SimpleResponse;
import com.ztx.security.core.properties.SecurityProperties;
/**
 * 登录请求处理类
 * @author zuo
 *
 */
@RestController
public class BrowserSecurityController {
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	//http请求缓存
	private RequestCache requestCache  =  new HttpSessionRequestCache();
	//重定向地址
	private  RedirectStrategy redirectStrategy =  new DefaultRedirectStrategy();
	//
	@Autowired
	private SecurityProperties securityProperties ;
	/**
	 * 主要从session中拿到用户的请求，判断是那种类型的，html则跳转注册页，rest则返回json
	 * @param request
	 * @param response
	 * @return 区分请求类型，判断跳转页面
	 * @throws IOException 
	 */
	@RequestMapping("authentication/require")
	@ResponseStatus(code = HttpStatus.UNAUTHORIZED)
	public SimpleResponse requireAuthentication(HttpServletRequest request , HttpServletResponse response) throws IOException {
		
		 SavedRequest saveRequest = requestCache.getRequest(request, response);
		 logger.info("请求跳转url"+securityProperties.getBrowserProperties().getLoginPage());
		 if(saveRequest != null) {
			 String targetUrl = saveRequest.getRedirectUrl();//获取链接请求地址
			 logger.info("跳转请求链接："+targetUrl);
			 if(StringUtils.endsWithIgnoreCase(targetUrl, ".html")) {//判断链接后缀是否为指定后缀
				 redirectStrategy.sendRedirect(request, response, securityProperties.getBrowserProperties().getLoginPage());
			 }
		 }
		
		return new SimpleResponse("访问服务需要身份认证，引导用户跳转注册登录页");
		
	}
	
	@RequestMapping("signIn")
	public String signIn() {
		System.out.println("进入注册方法");
		return "signIn";
	}
	//authentication/form
	@RequestMapping("authentication/form")
	public String form() {
		System.out.println("执行认证方法");
		return "signIn";
	}
}
