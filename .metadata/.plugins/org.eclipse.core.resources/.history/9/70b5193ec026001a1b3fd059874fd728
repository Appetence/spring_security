package com.ztx.web.controller;

import java.util.concurrent.Callable;

import org.apache.commons.lang.RandomStringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.async.DeferredResult;

import com.ztx.web.async.DeferredResultHolder;
import com.ztx.web.async.MockQueue;

@RestController
@RequestMapping("/async")
public class AsyncController {
	private Logger logger = LoggerFactory.getLogger(AsyncController.class);
	
	@Autowired
	private MockQueue mockQueue;
	
	@Autowired
	private DeferredResultHolder deferredResultHolder;
	//runnable  多线程处理 
	@GetMapping
	public Callable<String> order(){
		logger.info("主线程开始");
		 Callable<String> result = new  Callable<String>() {
			@Override
			public String call() throws Exception {
				logger.info("副线程开始");
				Thread.sleep(1000);
				logger.info("副线程结束");
				return "success full";
			}
		 };
		logger.info("主线程结束");
		return result;
		
	}
	@GetMapping("DeferredResult")
	public DeferredResult<String> orderDefrred() throws Exception{
		logger.info("主线程开始");
		String orderNumber = RandomStringUtils.randomNumeric(8);
		mockQueue.setPlaceOrder(orderNumber);
		DeferredResult<String> deferredResult = new DeferredResult<String>();
		deferredResultHolder.getMap().put(orderNumber, deferredResult);
		
		logger.info("主线程结束");
		return deferredResult;
		
	}
}
