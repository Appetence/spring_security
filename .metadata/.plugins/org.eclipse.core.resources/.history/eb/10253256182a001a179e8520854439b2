package com.ztx.web.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import com.ztx.web.interceptor.TimeInterceptor;
@Configuration
public class WebConfig implements WebMvcConfigurer {//WebMvcConfigurer接口的方式，而不用使用WebMvcConfigurerAdapter 

	@Autowired
	private TimeInterceptor timeInterceptor;
	
	
	@Override
	public void addInterceptors(InterceptorRegistry registry) {
		//registry.addInterceptor(timeInterceptor).addPathPatterns("/user");;
		 //添加登录处理拦截器，拦截所有请求，登录请求除外
        InterceptorRegistration interceptorRegistration = registry.addInterceptor(timeInterceptor);
        //排除配置
        /*interceptorRegistration.excludePathPatterns("/sys/login.json");
        interceptorRegistration.excludePathPatterns("/charts/**");
        interceptorRegistration.excludePathPatterns("/css/**");
        interceptorRegistration.excludePathPatterns("/easyUi/**");
        interceptorRegistration.excludePathPatterns("/flashPlayer/**");
        interceptorRegistration.excludePathPatterns("/font/**");
        interceptorRegistration.excludePathPatterns("/images/**");
        interceptorRegistration.excludePathPatterns("/js/**");
        interceptorRegistration.excludePathPatterns("/pages/**");
        interceptorRegistration.excludePathPatterns("/plugin/**");
        interceptorRegistration.excludePathPatterns("/index.html");
        interceptorRegistration.excludePathPatterns("/show.html");*/
        //配置拦截策略
        interceptorRegistration.addPathPatterns("/**");

	}
	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {

	    registry.addResourceHandler("/**").addResourceLocations("classpath:/META-INF/resources/") .addResourceLocations("classpath:/resources/").addResourceLocations("classpath:/static/")
	            .addResourceLocations("classpath:/public/");
	}

/*	@Bean
	public FilterRegistrationBean timeFilter() {
		FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();
		TimeFilter TimeFilter = new TimeFilter();
		filterRegistrationBean.setFilter(TimeFilter);
		List<String> url = new ArrayList<String>();
		url.add("/*");
		filterRegistrationBean.setUrlPatterns(url);
		return filterRegistrationBean;
	}*/

}
